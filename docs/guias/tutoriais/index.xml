<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stone OpenBank – TUTORIAIS</title>
    <link>https://stone-co.github.io/docs/guias/tutoriais/</link>
    <description>Recent content in TUTORIAIS on Stone OpenBank</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Sep 2020 18:00:00 -0300</lastBuildDate>
    
	  <atom:link href="https://stone-co.github.io/docs/guias/tutoriais/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Integrando na Prática</title>
      <link>https://stone-co.github.io/docs/guias/tutoriais/integrando-na-pratica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://stone-co.github.io/docs/guias/tutoriais/integrando-na-pratica/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Neste tutorial vamos ver como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gerar o token de &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/autenticacao&#34;&gt;autenticação&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Gerar o token e link de &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/consentimento&#34;&gt;consentimento&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Operar em contas que já concederam acesso à aplicação parceira.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Utilizaremos a linguagem Python na versão 3.7 para montar o token e a &lt;a href=&#34;https://pyjwt.readthedocs.io/en/latest/&#34;&gt;biblioteca PyJWT&lt;/a&gt; para assiná-lo.&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Conheça suas ferramentas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;É importante ler a documentação das bibliotecas utilizadas. A biblioteca utilizada neste tutorial, PyJWT, tem uma dependência extra para alguns algoritmos específicos. É o caso do algoritmo que será utilizado, RS256, que tem dependência da biblioteca &lt;code&gt;cryptography&lt;/code&gt;. Por conta disso, esta biblioteca também precisa ser instalada.&lt;/p&gt;

&lt;/div&gt;

&lt;h4 id=&#34;1-conhecendo-os-dados&#34;&gt;&lt;strong&gt;1. Conhecendo os dados&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Como resultado do &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/cadastro-da-aplicacao&#34;&gt;cadastro da sua aplicação&lt;/a&gt;, você recebeu um ClientID. Além disso, nos forneceu uma chave pública e manteve em segredo uma chave privada. Agora vamos ver como utilizá-los na prática.&lt;/p&gt;
&lt;p&gt;Para montar os tokens, tenha em mãos o seu &lt;code&gt;redirect_uri&lt;/code&gt; cadastrado, o seu ClientID e sua chave privada.&lt;/p&gt;
&lt;h4 id=&#34;2-se-preparando-para-gerar-tokens&#34;&gt;&lt;strong&gt;2. Se preparando para gerar tokens&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Aqui vamos importar as bibliotecas que vamos utilizar e definir algumas constantes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;jwt&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;requests&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;MINUTE&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;60&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;HOUR&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3600&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;CLIENT_ID&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;92b5f9aa-9552-45f4-86cb-c0331c9178a2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;REDIRECT_URI&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://myapplication.com/consent_callback&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#a40000&#34;&gt;ACCOUNTS_URL&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://sandbox-accounts.openbank.stone.com.br&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;API_URL&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://sandbox-api.openbank.stone.com.br/api/v1&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Armazenamos a chave privada no arquivo &lt;code&gt;private.pem&lt;/code&gt; e preparamos uma função para gerar o token. Essa função recebe um parâmetro com os claims e usa a chave privada para gerar e assinar o token.&lt;/p&gt;
&lt;p&gt;Lembrando que se trata de um processo de criptografia assimétrica. Neste processo, o desenvolvedor assina o token com sua chave privada e a Stone utiliza a chave pública compartilhada com a gente para verificar que realmente foi a aplicação parceira quem gerou o token.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;generate_token(claims):&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;private.pem&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;key_file:&lt;/span&gt;
        &lt;span style=&#34;color:#a40000&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;jwt.encode(claims,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;key_file.read(),&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;algorithm=&amp;#39;RS&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;token.decode()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Agora podemos assinar qualquer conjunto de claims e o resultado será um JWT.&lt;/p&gt;
&lt;p&gt;É possível utilizar claims arbitrários para testar essa funcionalidade:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;generate_token(&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;claim&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qualquer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;eyJ&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;eXAiOiJKV&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;QiLCJhbGciOiJSUzI&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;NiJ&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;.eyJjbGFpbSI&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;InF&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;YWxxdWVyIn&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;.hUGnpB&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;pI&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;TbQy&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;XDjXMmFTLWvYjk&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;98&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;UaTELfkJmHU&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;EK&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;-ZOTzSSNKdqOB&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;puGHr&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;xMRXta&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;WZLQmkRqJCVHSA&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;zsIdW&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;ABJiPaHXVOHFidq&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;iGZAbZtgHBf&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;ctko&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;OGxfLDJGedH&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;gYVh&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;i_tJ&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;kWpvLS&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;yMqNgwyHI&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;ZJecmL-qYD&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;FgrhGqyMK&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;LCxId&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;O_T&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;_QOisaLe_XXstXUnm&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;82&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;qvDh&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;iMZPqhV&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;V_CxnLl&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;CVZp&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;IfdQ&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;LAmtqaxhYSTODwBj&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;zOm_&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;bhfOcMO&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;91&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;LxY&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;wWW&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;fU&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;Qr&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;hyiUHqayBTiLRYqEGet_esQ_rrVFOn&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;tU&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;eWSA&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Se chegou a este mesmo resultado, você tem uma função que pode ser utilizada para assinar qualquer um dos seus tokens.&lt;/p&gt;
&lt;p&gt;A biblioteca escolhida incluiu automaticamente no header as informações de tipo e algorítimo utilizados para gerar o token. Para se certificar da validade do token é possível utilizar o site &lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Observe que trabalhamos com vários tokens JWT diferentes e utilizamos claims diferentes de acordo com a finalidade do token.&lt;/p&gt;
&lt;p&gt;Para o token de autenticação, é preciso utilizar os claims descritos em &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/autenticacao&#34;&gt;Autenticação&lt;/a&gt;; para o token de consentimento, serão utilizados os claims descritos em &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/consentimento&#34;&gt;Consentimento&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;3-montando-o-token-de-autenticação&#34;&gt;&lt;strong&gt;3. Montando o token de autenticação&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Inicialmente, é preciso consultar quais os claims específicos do token de autenticação na &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/autenticacao&#34;&gt;documentação&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Através da função que construimos é possível gerar e assinar esse token de forma simples.&lt;/p&gt;
&lt;p&gt;Esse token será enviado para a Stone através de uma chamada para nosso servidor de autenticação, e enviaremos como resposta um &lt;code&gt;access_token&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;access_token&lt;/code&gt; também é do tipo JWT, e funciona como uma chave de acesso para todas requisições na API.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;auth_claims():&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;int(time.time())&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;{ACCOUNTS_URL}/auth/realms/stone_bank&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;clientId&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;CLIENT_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;MINUTE&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;jti&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&amp;#39;token_id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;str(time.time())&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;nbf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;realm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stone_bank&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;CLIENT_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;authenticate():&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;auth_token&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;generate_token(auth_claims())&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;client_assertion_type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;client_assertion&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;auth_token&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;client_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;CLIENT_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;grant_type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;client_credentials&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a40000&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;requests.post(&lt;/span&gt;
        &lt;span style=&#34;color:#a40000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;{ACCOUNTS_URL}/auth/realms/stone_bank/protocol/openid-connect/token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;data=data)&lt;/span&gt;

    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;response.json()&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;access_token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Neste exemplo, estamos definindo uma função que retorna um dicionário com todos os claims necessários para o token de autenticação. Em seguida, é preciso enviar esse token e mais algumas informações para o nosso serviço de autenticação via POST.&lt;/p&gt;
&lt;p&gt;A biblioteca &lt;code&gt;requests&lt;/code&gt; foi a escolhida para realizar as requisições HTTP. No parâmetro &lt;code&gt;data&lt;/code&gt;, envia-se dados no formato  &amp;ldquo;x-www-form-urlencoded&amp;rdquo; já que este é o formato esperado pelo servidor de autenticação. Ver &lt;a href=&#34;https://2.python-requests.org/en/master/&#34;&gt;documentação&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No parâmetro &lt;code&gt;params&lt;/code&gt; envia-se os dados no formato &lt;a href=&#34;https://en.wikipedia.org/wiki/Query_string&#34;&gt;Query String&lt;/a&gt;, e no parâmetro &lt;code&gt;headers&lt;/code&gt; informamos o que será enviado no cabeçalho da requisição.&lt;/p&gt;
&lt;p&gt;Para facilitar o acesso aos dados da resposta, convertemos o conteúdo para JSON e retornamos o &lt;code&gt;access_token&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para utilizar o token de acesso, é preciso apenas adicionar esse token em um cabeçalho &lt;code&gt;authorization&lt;/code&gt; com o valor &lt;code&gt;Bearer TOKEN&lt;/code&gt;. Com isso, já é possível operar na API como é demonstrado mais a frente.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;4-montando-o-link-de-consentimento&#34;&gt;&lt;strong&gt;4. Montando o link de consentimento&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Assim como para o token de autenticação, inicialmente consultamos quais os claims específicos do token de consentimento na &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/consentimento&#34;&gt;documentação&lt;/a&gt; e, em seguida, utilizamos a função que construimos para gerar e assinar o token.&lt;/p&gt;
&lt;p&gt;Neste caso, vamos um pouco além da geração do token, utilizando uma função para montar o link de consentimento com os três parâmetros especificados na &lt;a href=&#34;https://stone-co.github.io/docs/guias/integracao/consentimento&#34;&gt;documentação&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Resumindo o passo a passo para obter o link do consentimento, é preciso:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Montar os claims para o token;&lt;/li&gt;
&lt;li&gt;Criar o token;&lt;/li&gt;
&lt;li&gt;Montar o link.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;consent_claims():&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;int(time.time())&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;accounts-hubid@openbank.stone.com.br&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;client_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;CLIENT_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;HOUR&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;CLIENT_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;jti&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;str(time.time())&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;nbf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;redirect_uri&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;REDIRECT_URI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;session_metadata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&amp;#39;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:{&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;time.time()&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;consent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
  
 &lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;consent_token():&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;generate_token(consent_claims())&lt;/span&gt;
  
 &lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;consent_link():&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;{ACCOUNTS_URL}/consentimento?client_id={CLIENT_ID}&amp;amp;jwt={consent_token()}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O resultado será um link válido por duas horas. Ele pode ser acessado e testado através do navegador.&lt;/p&gt;
&lt;p&gt;Observe que alguns detalhes podem ser adaptados de acordo com as necessidades específiicas de controle de tokens da sua aplicação.&lt;/p&gt;
&lt;p&gt;Um exemplo é parâmetro &lt;code&gt;jti&lt;/code&gt;, que faz parte dos claims e atua como um identificador do token. No código acima, é utilizada apenas uma string com o timestamp do momento como forma de garantir sua unicidade. Para sua aplicação é possível utilizar outros valores de forma a facilitar a identificação do token.&lt;/p&gt;
&lt;p&gt;Outro exemplo é o campo &lt;code&gt;session_metadata&lt;/code&gt;, para o qual passamos um dicionário único apenas por ser um campo obrigatório. Neste caso não temos intenção de controlar a sessão, mas a desenvolvedora pode utilizá-lo para esta finalidade, passando valores que se encaixam nas suas necessiades.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;5-utilizando-a-api&#34;&gt;&lt;strong&gt;5. Utilizando a API&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Utilizando seu &lt;code&gt;access_token&lt;/code&gt; já é possível acessar as funcionalidades da API, de acordo com o que a sua aplicação tem permissão de fazer. Para ter permissão de criar transações em contas de usuários, ou até de visualizar seus dados, é preciso obter consentimento do dono da conta. Isso é possível enviando o link construído no passo anterior para a usuária, para que ela possa dar acesso à conta.&lt;/p&gt;
&lt;h5 id=&#34;consultando-as-contas-às-quais-a-aplicação-parceira-tem-acesso&#34;&gt;&lt;strong&gt;Consultando as contas às quais a aplicação parceira tem acesso&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Através da API é possível, por exemplo, consultar a quais contas você tem acesso, tanto no caso de você ser uma aplicação parceira com consentimento para acessar contas, quanto no caso de você ser proprietário de alguma conta.&lt;/p&gt;
&lt;p&gt;Para isso, é preciso apenas consultar o endpoint &lt;a href=&#34;https://stone-co.github.io/docs/dados-da-conta/consultar-todas-as-contas-as-quais-o-usuario-tem-acesso&#34;&gt;Consultar Todas Contas às Quais Se Tem Acesso&lt;/a&gt;, utilizando seu &lt;code&gt;access_token&lt;/code&gt; no campo do botão &lt;code&gt;Try It&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Outra forma de acessar esse endpoint é realizando uma chamada para nossa API, enviando seu &lt;code&gt;access_token&lt;/code&gt; em um header. Abaixo podemos observar isso em um exemplo de função que poderia ser utilizada para realizar essa consulta.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;operational_accounts(access_token,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;pagination_params=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;{API_URL}/accounts&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;paginate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;**pagination_params&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color:#a40000&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;requests.get(&lt;/span&gt;
        &lt;span style=&#34;color:#a40000&#34;&gt;url,&lt;/span&gt;
        &lt;span style=&#34;color:#a40000&#34;&gt;params=params,&lt;/span&gt;
        &lt;span style=&#34;color:#a40000&#34;&gt;headers=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&amp;#39;Bearer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;access_token&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;).json()&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Analisando o código acima, podemos chegar às seguintes conclusões:&lt;/p&gt;
&lt;p&gt;Observe que temos dois parâmetros na função &lt;code&gt;operational_accounts&lt;/code&gt;: &lt;code&gt;access_token&lt;/code&gt; e &lt;code&gt;pagination_params&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;access_token&lt;/code&gt; : É o resultado de uma autenticação bem sucedida. Sempre que uma aplicação parceira se autenticar receberá um token de acesso, cuja validade é informada em seus claims;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pagination_params&lt;/code&gt;: A maior parte dos nossos endpoints utilizam uma &lt;a href=&#34;https://stone-co.github.io/docs/stone-openbank/paginacao&#34;&gt;paginação padrão&lt;/a&gt;. Isso permite realizar requisições HTTP de forma mais prática, além de poupar consumo de rede.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E, por fim, obtem-se como resposta uma lista das contas às quais a aplicação tem acesso.&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Padrões da Nossa API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seguimos alguns padrões para alguns tipos de dados em toda a nossa API. &lt;a href=&#34;https://stone-co.github.io/docs/stone-openbank/data-e-hora&#34;&gt;Aqui&lt;/a&gt; se encontram alguns destes padrões.&lt;/p&gt;

&lt;/div&gt;

&lt;br&gt;
&lt;h4 id=&#34;criando-transferências-em-uma-conta&#34;&gt;&lt;strong&gt;Criando transferências em uma conta&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Outra funcionalidade é a criação de transferências, tanto entre contas Stone como também de uma conta Stone para contas em outros bancos.&lt;/p&gt;
&lt;p&gt;Assim como no caso anterior e de forma padrão para nossos endpoints, para acessá-los é preciso apenas obter permissão de acesso através do consentimento ou ser o próprio dono da conta, e provar isso enviando seu &lt;code&gt;access_token&lt;/code&gt; em um header. As informações de permissões de um sujeito são armazenadas em seu &lt;code&gt;access_token&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O exemplo a seguir foi construído considerando uma aplicação com acesso a pelo menos duas contas, e que a primeira conta tem saldo suficiente para a transferência.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;internal_transfer(token,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;params):&lt;/span&gt;
    &lt;span style=&#34;color:#a40000&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;API_URL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;/internal_transfers&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#a40000&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;requests.post(url,&lt;/span&gt;
                             &lt;span style=&#34;color:#a40000&#34;&gt;json=params,&lt;/span&gt;
                             &lt;span style=&#34;color:#a40000&#34;&gt;headers=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                                 &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;f&amp;#39;Bearer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;token&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;
                             &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;).json()&lt;/span&gt;

    &lt;span style=&#34;color:#a40000&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;response&lt;/span&gt;
  
&lt;span style=&#34;color:#a40000&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;authenticate()&lt;/span&gt;
  
&lt;span style=&#34;color:#a40000&#34;&gt;accounts&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;operational_accounts(token)&lt;/span&gt;
  
&lt;span style=&#34;color:#a40000&#34;&gt;internal_transfer_params&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;accounts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;account&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;account_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;accounts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;account_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  
&lt;span style=&#34;color:#a40000&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;internal_transfer(token,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;internal_transfer_params)&lt;/span&gt;
&lt;span style=&#34;color:#a40000&#34;&gt;print(response.json())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ocorrendo tudo bem, você receberá como retorno as informações da transferência recém-criada. Em caso de erro como, por exemplo, por saldo insuficiente, receberá como retorno uma mensagem de erro.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Success&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;approval_expired_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;approved_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;approved_by&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;cancelled_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;created_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2019-07-29T13:40:05Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;created_by&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;application:92b5f9aa-9552-45f4-86cb-c0331c9178a2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;failed_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;failure_reason_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;failure_reason_description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;fee&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;finished_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;000ebdf8-4acf-4ed2-83e9-f0c7a766ac61&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;rejected_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;rejected_by&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;scheduled_to&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;settled_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;account&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;account_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;517532&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;entity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Severo&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;target_account_code&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;517532&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;target_account_owner_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Severo&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Failure&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;srn:error:not_enough_funds&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;h4 id=&#34;conclusão&#34;&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Utilizando tokens é possível se autenticar e realizar a solicitação de consentimento em contas de usuários de forma segura.&lt;/p&gt;
&lt;p&gt;É preciso utilizar uma biblioteca para gerar e assinar os tokens JWT. A escolha da biblioteca deve ser feita com cuidado pois é preciso ter conhecimento de como utilizá-la corretamente para obter sucesso gerando os tokens.&lt;/p&gt;
&lt;p&gt;É interessante também consultar os claims específicos para cada token na sessão adequada da documentação, além de se atentar à necessidade de utilizar sua chave privada e o algoritmo RS256 para assinar seus tokens.&lt;/p&gt;
&lt;p&gt;Utilizando o &lt;code&gt;access_token&lt;/code&gt; e obtendo consentimento, já é possível realizar chamadas na API e acessar suas funcionalidades, como consultar as contas às quais a aplicação tem acesso, consultar o saldo dessas contas e criar transferências.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
